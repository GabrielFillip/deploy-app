name: Deploy da Aplicação

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: gabrielfillip/deploy-app

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Login no Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build da imagem
      run: docker build -t $DOCKER_IMAGE .

    - name: Push da imagem para o Docker Hub
      run: docker push $DOCKER_IMAGE

    - name: Subir SonarQube temporário para análise
      run: |
        docker network create sonar-net || true
        docker run -d --name sonar --network sonar-net -p 8114:9000 sonarqube:community
        echo "Aguardando SonarQube iniciar..."
        for i in {1..60}; do
          echo "Resposta do /api/server/version:";
          curl -s http://localhost:8114/api/server/version || true
          if curl -s http://localhost:8114/api/server/version | grep -E '^[0-9]'; then
            echo "SonarQube está pronto!"
            break
          fi
          echo "Aguardando SonarQube... ($i/60)"
          sleep 5
        done
        echo "Aguardando endpoint de autenticação do SonarQube..."
        for i in {1..30}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST -u admin:admin http://localhost:8114/api/authentication/login)
          if [ "$STATUS" = "200" ]; then
            echo "Endpoint de autenticação pronto!"
            break
          fi
          echo "Aguardando autenticação... ($i/30)"
          sleep 2
        done
        echo "Gerando token SonarQube..."
        SONAR_TOKEN=$(curl -s -u admin:admin -X POST "http://localhost:8114/api/user_tokens/generate?name=ci-token" | grep -oP '"token":"\K[^"]+')
        if [ -z "$SONAR_TOKEN" ]; then
          echo "Erro ao gerar token do SonarQube. Abortando pipeline."
          docker logs sonar | tail -50
          docker stop sonar
          docker rm sonar
          exit 1
        fi
        echo "Rodando análise com sonar-scanner..."
        docker run --rm \
          --network sonar-net \
          -e SONAR_HOST_URL="http://sonar:9000" \
          -e SONAR_TOKEN="$SONAR_TOKEN" \
          -v ${{ github.workspace }}:/usr/src \
          sonarsource/sonar-scanner-cli
        echo "Removendo SonarQube..."
        docker stop sonar
        docker rm sonar

    - name: Copiar código para o servidor remoto
      uses: appleboy/scp-action@v0.1.4
      with:
        host: 201.23.3.86
        username: aluno
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: ./*
        target: ~/TrabalhoVolo

    - name: Acessar servidor remoto e rodar Deploy com Docker Run
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: 201.23.3.86
        username: aluno
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          APP_IMAGE="gabrielfillip/deploy-app:latest"
          DB_IMAGE="mysql:8"
          NETWORK_NAME="trabalho-volo-net"
          DB_CONTAINER="trabalho-mysql"
          APP_CONTAINER="trabalho-app"

          # Cria rede se não existir
          docker network create $NETWORK_NAME || true

          # Remove containers antigos
          docker stop $APP_CONTAINER || true && docker rm $APP_CONTAINER || true
          docker stop $DB_CONTAINER || true && docker rm $DB_CONTAINER || true

          # Sobe o banco
          docker run -d --name $DB_CONTAINER --network $NETWORK_NAME --restart always \
            -e MYSQL_DATABASE=trabalho \
            -e MYSQL_USER=appuser \
            -e MYSQL_PASSWORD=appsenha \
            -e MYSQL_ROOT_PASSWORD=root \
            -p 8111:3306 \
            -v trabalho_db_data:/var/lib/mysql \
            mysql:8

          echo "Aguardando o banco iniciar..."
          sleep 20

          # Sobe o app
          docker pull $APP_IMAGE
          docker run -d --name $APP_CONTAINER --network $NETWORK_NAME --restart always \
            -e DB_NAME=trabalho \
            -e DB_USER=appuser \
            -e DB_PASSWORD=appsenha \
            -e DB_HOST=$DB_CONTAINER \
            -e DB_PORT=3306 \
            -e PORT=8112 \
            -p 8112:8112 \
            $APP_IMAGE

          echo "Containers em execução:"
          docker ps
