name: Deploy da Aplicação

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: gabrielfillip/deploy-app

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Login no Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build da imagem
      run: docker build -t $DOCKER_IMAGE .

    - name: Push da imagem para o Docker Hub
      run: docker push $DOCKER_IMAGE

    - name: Acessar servidor remoto e rodar Sonar + Deploy
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: 201.23.3.86
        username: aluno
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: DOCKER_IMAGE
        script: |
          echo "Pull da imagem mais recente..."
          docker pull $DOCKER_IMAGE

          echo "Criando rede Docker para SonarQube..."
          docker network create sonar-net || true

          echo "Removendo SonarQube antigo..."
          docker rm -f sonar || true

          echo "Subindo SonarQube temporariamente..."
          docker run -d --name sonar --network sonar-net -p 8114:9000 sonarqube:community
          echo "Aguardando SonarQube iniciar..."
          for i in {1..60}; do
            echo "Resposta do /api/server/version:";
            curl -s http://localhost:8114/api/server/version || true
            if curl -s http://localhost:8114/api/server/version | grep -E '^[0-9]'; then
              echo "SonarQube está pronto!"
              break
            fi
            echo "Aguardando SonarQube... ($i/60)"
            sleep 5
          done

          echo "Status do container SonarQube antes do sonar-scanner:"
          docker ps -a | grep sonar
          docker logs sonar | tail -30

          echo "Aguardando endpoint de autenticação do SonarQube..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST -u admin:admin http://localhost:8114/api/authentication/login)
            if [ "$STATUS" = "200" ]; then
              echo "Endpoint de autenticação pronto!"
              break
            fi
            echo "Aguardando autenticação... ($i/30)"
            sleep 2
          done

          echo "Gerando token SonarQube..."
          SONAR_TOKEN=$(curl -s -u admin:admin -X POST "http://localhost:8114/api/user_tokens/generate?name=ci-token" | grep -oP '"token":"\K[^"]+')

          if [ -z "$SONAR_TOKEN" ]; then
            echo "Erro ao gerar token do SonarQube. Abortando pipeline."
            docker logs sonar | tail -50
            exit 1
          fi

          echo "Rodando análise com sonar-scanner..."
          docker run --rm \
            --network sonar-net \
            -e SONAR_HOST_URL="http://sonar:9000" \
            -e SONAR_TOKEN="$SONAR_TOKEN" \
            -v ${{ github.workspace }}:/usr/src \
            sonarsource/sonar-scanner-cli

          echo "Removendo SonarQube..."
          docker stop sonar
          docker rm sonar

          echo "Se passou, removendo container antigo..."
          docker rm -f deploy-app || true

          echo "Subindo novo container..."
          docker run -d --name deploy-app --network host \
            -e DB_NAME=trabalho \
            -e DB_USER=appuser \
            -e DB_PASSWORD=appsenha \
            -e DB_HOST=127.0.0.1 \
            -e DB_PORT=8111 \
            -e PORT=8112 \
            -p 8112:8112 \
            $DOCKER_IMAGE
